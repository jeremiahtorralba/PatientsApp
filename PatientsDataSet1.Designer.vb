'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PatientsDataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PatientsDataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableCases As CasesDataTable
    
    Private tableNeighbourhood As NeighbourhoodDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Cases")) Is Nothing) Then
                MyBase.Tables.Add(New CasesDataTable(ds.Tables("Cases")))
            End If
            If (Not (ds.Tables("Neighbourhood")) Is Nothing) Then
                MyBase.Tables.Add(New NeighbourhoodDataTable(ds.Tables("Neighbourhood")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cases() As CasesDataTable
        Get
            Return Me.tableCases
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Neighbourhood() As NeighbourhoodDataTable
        Get
            Return Me.tableNeighbourhood
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PatientsDataSet1 = CType(MyBase.Clone,PatientsDataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Cases")) Is Nothing) Then
                MyBase.Tables.Add(New CasesDataTable(ds.Tables("Cases")))
            End If
            If (Not (ds.Tables("Neighbourhood")) Is Nothing) Then
                MyBase.Tables.Add(New NeighbourhoodDataTable(ds.Tables("Neighbourhood")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCases = CType(MyBase.Tables("Cases"),CasesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCases) Is Nothing) Then
                Me.tableCases.InitVars
            End If
        End If
        Me.tableNeighbourhood = CType(MyBase.Tables("Neighbourhood"),NeighbourhoodDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNeighbourhood) Is Nothing) Then
                Me.tableNeighbourhood.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "PatientsDataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PatientsDataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCases = New CasesDataTable()
        MyBase.Tables.Add(Me.tableCases)
        Me.tableNeighbourhood = New NeighbourhoodDataTable()
        MyBase.Tables.Add(Me.tableNeighbourhood)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeCases() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Function ShouldSerializeNeighbourhood() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PatientsDataSet1 = New PatientsDataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub CasesRowChangeEventHandler(ByVal sender As Object, ByVal e As CasesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Delegate Sub NeighbourhoodRowChangeEventHandler(ByVal sender As Object, ByVal e As NeighbourhoodRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CasesDataTable
        Inherits Global.System.Data.TypedTableBase(Of CasesRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnAssigned_ID As Global.System.Data.DataColumn
        
        Private columnOutbreak_Associated As Global.System.Data.DataColumn
        
        Private columnAge_Group As Global.System.Data.DataColumn
        
        Private columnNeighbourhood_Name As Global.System.Data.DataColumn
        
        Private columnFSA As Global.System.Data.DataColumn
        
        Private columnSource_of_Infection As Global.System.Data.DataColumn
        
        Private columnClassification As Global.System.Data.DataColumn
        
        Private columnEpisode_Date As Global.System.Data.DataColumn
        
        Private columnReported_Date As Global.System.Data.DataColumn
        
        Private columnClient_Gender As Global.System.Data.DataColumn
        
        Private columnOutcome As Global.System.Data.DataColumn
        
        Private columnCurrently_Hospitalized As Global.System.Data.DataColumn
        
        Private columnCurrently_in_ICU As Global.System.Data.DataColumn
        
        Private columnCurrently_Intubated As Global.System.Data.DataColumn
        
        Private columnEver_Hospitalized As Global.System.Data.DataColumn
        
        Private columnEver_in_ICU As Global.System.Data.DataColumn
        
        Private columnEver_Intubated As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnMonth As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cases"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Assigned_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssigned_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Outbreak_AssociatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOutbreak_Associated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Age_GroupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge_Group
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Neighbourhood_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeighbourhood_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property FSAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Source_of_InfectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource_of_Infection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ClassificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Episode_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEpisode_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Reported_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReported_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Client_GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClient_Gender
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property OutcomeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOutcome
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Currently_HospitalizedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrently_Hospitalized
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Currently_in_ICUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrently_in_ICU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Currently_IntubatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrently_Intubated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Ever_HospitalizedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEver_Hospitalized
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Ever_in_ICUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEver_in_ICU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Ever_IntubatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEver_Intubated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property MonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CasesRow
            Get
                Return CType(Me.Rows(index),CasesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CasesRowChanging As CasesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CasesRowChanged As CasesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CasesRowDeleting As CasesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event CasesRowDeleted As CasesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddCasesRow(ByVal row As CasesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddCasesRow( _
                    ByVal Id As Integer,  _
                    ByVal Assigned_ID As Integer,  _
                    ByVal Outbreak_Associated As String,  _
                    ByVal Age_Group As String,  _
                    ByVal Neighbourhood_Name As String,  _
                    ByVal FSA As String,  _
                    ByVal Source_of_Infection As String,  _
                    ByVal Classification As String,  _
                    ByVal Episode_Date As Date,  _
                    ByVal Reported_Date As Date,  _
                    ByVal Client_Gender As String,  _
                    ByVal Outcome As String,  _
                    ByVal Currently_Hospitalized As String,  _
                    ByVal Currently_in_ICU As String,  _
                    ByVal Currently_Intubated As String,  _
                    ByVal Ever_Hospitalized As String,  _
                    ByVal Ever_in_ICU As String,  _
                    ByVal Ever_Intubated As String,  _
                    ByVal Year As Short,  _
                    ByVal Month As Integer) As CasesRow
            Dim rowCasesRow As CasesRow = CType(Me.NewRow,CasesRow)
            Dim columnValuesArray() As Object = New Object() {Id, Assigned_ID, Outbreak_Associated, Age_Group, Neighbourhood_Name, FSA, Source_of_Infection, Classification, Episode_Date, Reported_Date, Client_Gender, Outcome, Currently_Hospitalized, Currently_in_ICU, Currently_Intubated, Ever_Hospitalized, Ever_in_ICU, Ever_Intubated, Year, Month}
            rowCasesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCasesRow)
            Return rowCasesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CasesDataTable = CType(MyBase.Clone,CasesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CasesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnAssigned_ID = MyBase.Columns("Assigned_ID")
            Me.columnOutbreak_Associated = MyBase.Columns("Outbreak Associated")
            Me.columnAge_Group = MyBase.Columns("Age Group")
            Me.columnNeighbourhood_Name = MyBase.Columns("Neighbourhood Name")
            Me.columnFSA = MyBase.Columns("FSA")
            Me.columnSource_of_Infection = MyBase.Columns("Source of Infection")
            Me.columnClassification = MyBase.Columns("Classification")
            Me.columnEpisode_Date = MyBase.Columns("Episode Date")
            Me.columnReported_Date = MyBase.Columns("Reported Date")
            Me.columnClient_Gender = MyBase.Columns("Client Gender")
            Me.columnOutcome = MyBase.Columns("Outcome")
            Me.columnCurrently_Hospitalized = MyBase.Columns("Currently Hospitalized")
            Me.columnCurrently_in_ICU = MyBase.Columns("Currently in ICU")
            Me.columnCurrently_Intubated = MyBase.Columns("Currently Intubated")
            Me.columnEver_Hospitalized = MyBase.Columns("Ever Hospitalized")
            Me.columnEver_in_ICU = MyBase.Columns("Ever in ICU")
            Me.columnEver_Intubated = MyBase.Columns("Ever Intubated")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnMonth = MyBase.Columns("Month")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnAssigned_ID = New Global.System.Data.DataColumn("Assigned_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssigned_ID)
            Me.columnOutbreak_Associated = New Global.System.Data.DataColumn("Outbreak Associated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutbreak_Associated)
            Me.columnAge_Group = New Global.System.Data.DataColumn("Age Group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge_Group)
            Me.columnNeighbourhood_Name = New Global.System.Data.DataColumn("Neighbourhood Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeighbourhood_Name)
            Me.columnFSA = New Global.System.Data.DataColumn("FSA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSA)
            Me.columnSource_of_Infection = New Global.System.Data.DataColumn("Source of Infection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource_of_Infection)
            Me.columnClassification = New Global.System.Data.DataColumn("Classification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassification)
            Me.columnEpisode_Date = New Global.System.Data.DataColumn("Episode Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEpisode_Date)
            Me.columnReported_Date = New Global.System.Data.DataColumn("Reported Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReported_Date)
            Me.columnClient_Gender = New Global.System.Data.DataColumn("Client Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClient_Gender)
            Me.columnOutcome = New Global.System.Data.DataColumn("Outcome", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutcome)
            Me.columnCurrently_Hospitalized = New Global.System.Data.DataColumn("Currently Hospitalized", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrently_Hospitalized)
            Me.columnCurrently_in_ICU = New Global.System.Data.DataColumn("Currently in ICU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrently_in_ICU)
            Me.columnCurrently_Intubated = New Global.System.Data.DataColumn("Currently Intubated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrently_Intubated)
            Me.columnEver_Hospitalized = New Global.System.Data.DataColumn("Ever Hospitalized", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEver_Hospitalized)
            Me.columnEver_in_ICU = New Global.System.Data.DataColumn("Ever in ICU", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEver_in_ICU)
            Me.columnEver_Intubated = New Global.System.Data.DataColumn("Ever Intubated", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEver_Intubated)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnMonth = New Global.System.Data.DataColumn("Month", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonth)
            Me.columnId.AllowDBNull = false
            Me.columnAssigned_ID.AllowDBNull = false
            Me.columnOutbreak_Associated.AllowDBNull = false
            Me.columnOutbreak_Associated.MaxLength = 50
            Me.columnAge_Group.AllowDBNull = false
            Me.columnAge_Group.MaxLength = 50
            Me.columnNeighbourhood_Name.MaxLength = 50
            Me.columnFSA.MaxLength = 50
            Me.columnSource_of_Infection.AllowDBNull = false
            Me.columnSource_of_Infection.MaxLength = 50
            Me.columnClassification.AllowDBNull = false
            Me.columnClassification.MaxLength = 10
            Me.columnEpisode_Date.AllowDBNull = false
            Me.columnReported_Date.AllowDBNull = false
            Me.columnClient_Gender.AllowDBNull = false
            Me.columnClient_Gender.MaxLength = 10
            Me.columnOutcome.AllowDBNull = false
            Me.columnOutcome.MaxLength = 10
            Me.columnCurrently_Hospitalized.AllowDBNull = false
            Me.columnCurrently_Hospitalized.MaxLength = 10
            Me.columnCurrently_in_ICU.AllowDBNull = false
            Me.columnCurrently_in_ICU.MaxLength = 10
            Me.columnCurrently_Intubated.AllowDBNull = false
            Me.columnCurrently_Intubated.MaxLength = 10
            Me.columnEver_Hospitalized.AllowDBNull = false
            Me.columnEver_Hospitalized.MaxLength = 10
            Me.columnEver_in_ICU.AllowDBNull = false
            Me.columnEver_in_ICU.MaxLength = 10
            Me.columnEver_Intubated.AllowDBNull = false
            Me.columnEver_Intubated.MaxLength = 10
            Me.columnYear.AllowDBNull = false
            Me.columnMonth.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewCasesRow() As CasesRow
            Return CType(Me.NewRow,CasesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CasesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CasesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CasesRowChangedEvent) Is Nothing) Then
                RaiseEvent CasesRowChanged(Me, New CasesRowChangeEvent(CType(e.Row,CasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CasesRowChangingEvent) Is Nothing) Then
                RaiseEvent CasesRowChanging(Me, New CasesRowChangeEvent(CType(e.Row,CasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CasesRowDeletedEvent) Is Nothing) Then
                RaiseEvent CasesRowDeleted(Me, New CasesRowChangeEvent(CType(e.Row,CasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CasesRowDeletingEvent) Is Nothing) Then
                RaiseEvent CasesRowDeleting(Me, New CasesRowChangeEvent(CType(e.Row,CasesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveCasesRow(ByVal row As CasesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As PatientsDataSet1 = New PatientsDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CasesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class NeighbourhoodDataTable
        Inherits Global.System.Data.TypedTableBase(Of NeighbourhoodRow)
        
        Private columnNeighbourhood_Name As Global.System.Data.DataColumn
        
        Private columnPopulation As Global.System.Data.DataColumn
        
        Private columnPopulation_Density As Global.System.Data.DataColumn
        
        Private columnChildren As Global.System.Data.DataColumn
        
        Private columnYouth As Global.System.Data.DataColumn
        
        Private columnWorking_Age As Global.System.Data.DataColumn
        
        Private _columnPre_retirement As Global.System.Data.DataColumn
        
        Private columnSeniors As Global.System.Data.DataColumn
        
        Private columnOlder_Seniors As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Neighbourhood"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Neighbourhood_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNeighbourhood_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property PopulationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPopulation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Population_DensityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPopulation_Density
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property ChildrenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChildren
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property YouthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYouth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Working_AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorking_Age
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property _Pre_retirementColumn() As Global.System.Data.DataColumn
            Get
                Return Me._columnPre_retirement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property SeniorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeniors
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Older_SeniorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOlder_Seniors
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As NeighbourhoodRow
            Get
                Return CType(Me.Rows(index),NeighbourhoodRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NeighbourhoodRowChanging As NeighbourhoodRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NeighbourhoodRowChanged As NeighbourhoodRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NeighbourhoodRowDeleting As NeighbourhoodRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Event NeighbourhoodRowDeleted As NeighbourhoodRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Sub AddNeighbourhoodRow(ByVal row As NeighbourhoodRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overloads Function AddNeighbourhoodRow(ByVal Neighbourhood_Name As String, ByVal Population As Integer, ByVal Population_Density As Integer, ByVal Children As Integer, ByVal Youth As Integer, ByVal Working_Age As Integer, ByVal _Pre_retirement As Integer, ByVal Seniors As Integer, ByVal Older_Seniors As Integer) As NeighbourhoodRow
            Dim rowNeighbourhoodRow As NeighbourhoodRow = CType(Me.NewRow,NeighbourhoodRow)
            Dim columnValuesArray() As Object = New Object() {Neighbourhood_Name, Population, Population_Density, Children, Youth, Working_Age, _Pre_retirement, Seniors, Older_Seniors}
            rowNeighbourhoodRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowNeighbourhoodRow)
            Return rowNeighbourhoodRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As NeighbourhoodDataTable = CType(MyBase.Clone,NeighbourhoodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New NeighbourhoodDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnNeighbourhood_Name = MyBase.Columns("Neighbourhood Name")
            Me.columnPopulation = MyBase.Columns("Population")
            Me.columnPopulation_Density = MyBase.Columns("Population Density")
            Me.columnChildren = MyBase.Columns("Children")
            Me.columnYouth = MyBase.Columns("Youth")
            Me.columnWorking_Age = MyBase.Columns("Working Age")
            Me._columnPre_retirement = MyBase.Columns("Pre-retirement")
            Me.columnSeniors = MyBase.Columns("Seniors")
            Me.columnOlder_Seniors = MyBase.Columns("Older Seniors")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitClass()
            Me.columnNeighbourhood_Name = New Global.System.Data.DataColumn("Neighbourhood Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNeighbourhood_Name)
            Me.columnPopulation = New Global.System.Data.DataColumn("Population", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPopulation)
            Me.columnPopulation_Density = New Global.System.Data.DataColumn("Population Density", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPopulation_Density)
            Me.columnChildren = New Global.System.Data.DataColumn("Children", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChildren)
            Me.columnYouth = New Global.System.Data.DataColumn("Youth", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYouth)
            Me.columnWorking_Age = New Global.System.Data.DataColumn("Working Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorking_Age)
            Me._columnPre_retirement = New Global.System.Data.DataColumn("Pre-retirement", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            Me._columnPre_retirement.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnPre_retirement")
            Me._columnPre_retirement.ExtendedProperties.Add("Generator_UserColumnName", "Pre-retirement")
            MyBase.Columns.Add(Me._columnPre_retirement)
            Me.columnSeniors = New Global.System.Data.DataColumn("Seniors", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeniors)
            Me.columnOlder_Seniors = New Global.System.Data.DataColumn("Older Seniors", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOlder_Seniors)
            Me.columnNeighbourhood_Name.AllowDBNull = false
            Me.columnNeighbourhood_Name.MaxLength = 50
            Me.columnPopulation.AllowDBNull = false
            Me.columnPopulation_Density.AllowDBNull = false
            Me.columnChildren.AllowDBNull = false
            Me.columnYouth.AllowDBNull = false
            Me.columnWorking_Age.AllowDBNull = false
            Me._columnPre_retirement.AllowDBNull = false
            Me.columnSeniors.AllowDBNull = false
            Me.columnOlder_Seniors.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function NewNeighbourhoodRow() As NeighbourhoodRow
            Return CType(Me.NewRow,NeighbourhoodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New NeighbourhoodRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(NeighbourhoodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NeighbourhoodRowChangedEvent) Is Nothing) Then
                RaiseEvent NeighbourhoodRowChanged(Me, New NeighbourhoodRowChangeEvent(CType(e.Row,NeighbourhoodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NeighbourhoodRowChangingEvent) Is Nothing) Then
                RaiseEvent NeighbourhoodRowChanging(Me, New NeighbourhoodRowChangeEvent(CType(e.Row,NeighbourhoodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NeighbourhoodRowDeletedEvent) Is Nothing) Then
                RaiseEvent NeighbourhoodRowDeleted(Me, New NeighbourhoodRowChangeEvent(CType(e.Row,NeighbourhoodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NeighbourhoodRowDeletingEvent) Is Nothing) Then
                RaiseEvent NeighbourhoodRowDeleting(Me, New NeighbourhoodRowChangeEvent(CType(e.Row,NeighbourhoodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub RemoveNeighbourhoodRow(ByVal row As NeighbourhoodRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As PatientsDataSet1 = New PatientsDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NeighbourhoodDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class CasesRow
        Inherits Global.System.Data.DataRow
        
        Private tableCases As CasesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCases = CType(Me.Table,CasesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableCases.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCases.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Assigned_ID() As Integer
            Get
                Return CType(Me(Me.tableCases.Assigned_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCases.Assigned_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Outbreak_Associated() As String
            Get
                Return CType(Me(Me.tableCases.Outbreak_AssociatedColumn),String)
            End Get
            Set
                Me(Me.tableCases.Outbreak_AssociatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Age_Group() As String
            Get
                Return CType(Me(Me.tableCases.Age_GroupColumn),String)
            End Get
            Set
                Me(Me.tableCases.Age_GroupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Neighbourhood_Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableCases.Neighbourhood_NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Neighbourhood Name' in table 'Cases' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCases.Neighbourhood_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property FSA() As String
            Get
                Try 
                    Return CType(Me(Me.tableCases.FSAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FSA' in table 'Cases' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCases.FSAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Source_of_Infection() As String
            Get
                Return CType(Me(Me.tableCases.Source_of_InfectionColumn),String)
            End Get
            Set
                Me(Me.tableCases.Source_of_InfectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Classification() As String
            Get
                Return CType(Me(Me.tableCases.ClassificationColumn),String)
            End Get
            Set
                Me(Me.tableCases.ClassificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Episode_Date() As Date
            Get
                Return CType(Me(Me.tableCases.Episode_DateColumn),Date)
            End Get
            Set
                Me(Me.tableCases.Episode_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Reported_Date() As Date
            Get
                Return CType(Me(Me.tableCases.Reported_DateColumn),Date)
            End Get
            Set
                Me(Me.tableCases.Reported_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Client_Gender() As String
            Get
                Return CType(Me(Me.tableCases.Client_GenderColumn),String)
            End Get
            Set
                Me(Me.tableCases.Client_GenderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Outcome() As String
            Get
                Return CType(Me(Me.tableCases.OutcomeColumn),String)
            End Get
            Set
                Me(Me.tableCases.OutcomeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Currently_Hospitalized() As String
            Get
                Return CType(Me(Me.tableCases.Currently_HospitalizedColumn),String)
            End Get
            Set
                Me(Me.tableCases.Currently_HospitalizedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Currently_in_ICU() As String
            Get
                Return CType(Me(Me.tableCases.Currently_in_ICUColumn),String)
            End Get
            Set
                Me(Me.tableCases.Currently_in_ICUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Currently_Intubated() As String
            Get
                Return CType(Me(Me.tableCases.Currently_IntubatedColumn),String)
            End Get
            Set
                Me(Me.tableCases.Currently_IntubatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Ever_Hospitalized() As String
            Get
                Return CType(Me(Me.tableCases.Ever_HospitalizedColumn),String)
            End Get
            Set
                Me(Me.tableCases.Ever_HospitalizedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Ever_in_ICU() As String
            Get
                Return CType(Me(Me.tableCases.Ever_in_ICUColumn),String)
            End Get
            Set
                Me(Me.tableCases.Ever_in_ICUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Ever_Intubated() As String
            Get
                Return CType(Me(Me.tableCases.Ever_IntubatedColumn),String)
            End Get
            Set
                Me(Me.tableCases.Ever_IntubatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Year() As Short
            Get
                Return CType(Me(Me.tableCases.YearColumn),Short)
            End Get
            Set
                Me(Me.tableCases.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Month() As Integer
            Get
                Return CType(Me(Me.tableCases.MonthColumn),Integer)
            End Get
            Set
                Me(Me.tableCases.MonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsNeighbourhood_NameNull() As Boolean
            Return Me.IsNull(Me.tableCases.Neighbourhood_NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetNeighbourhood_NameNull()
            Me(Me.tableCases.Neighbourhood_NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Function IsFSANull() As Boolean
            Return Me.IsNull(Me.tableCases.FSAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub SetFSANull()
            Me(Me.tableCases.FSAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class NeighbourhoodRow
        Inherits Global.System.Data.DataRow
        
        Private tableNeighbourhood As NeighbourhoodDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNeighbourhood = CType(Me.Table,NeighbourhoodDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Neighbourhood_Name() As String
            Get
                Return CType(Me(Me.tableNeighbourhood.Neighbourhood_NameColumn),String)
            End Get
            Set
                Me(Me.tableNeighbourhood.Neighbourhood_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Population() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood.PopulationColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood.PopulationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Population_Density() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood.Population_DensityColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood.Population_DensityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Children() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood.ChildrenColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood.ChildrenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Youth() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood.YouthColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood.YouthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Working_Age() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood.Working_AgeColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood.Working_AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property _Pre_retirement() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood._Pre_retirementColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood._Pre_retirementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Seniors() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood.SeniorsColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood.SeniorsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property Older_Seniors() As Integer
            Get
                Return CType(Me(Me.tableNeighbourhood.Older_SeniorsColumn),Integer)
            End Get
            Set
                Me(Me.tableNeighbourhood.Older_SeniorsColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class CasesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CasesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As CasesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As CasesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
    Public Class NeighbourhoodRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As NeighbourhoodRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New(ByVal row As NeighbourhoodRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Row() As NeighbourhoodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace PatientsDataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CasesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Cases"
            tableMapping.ColumnMappings.Add("Id", "Id")
            tableMapping.ColumnMappings.Add("Assigned_ID", "Assigned_ID")
            tableMapping.ColumnMappings.Add("Outbreak Associated", "Outbreak Associated")
            tableMapping.ColumnMappings.Add("Age Group", "Age Group")
            tableMapping.ColumnMappings.Add("Neighbourhood Name", "Neighbourhood Name")
            tableMapping.ColumnMappings.Add("FSA", "FSA")
            tableMapping.ColumnMappings.Add("Source of Infection", "Source of Infection")
            tableMapping.ColumnMappings.Add("Classification", "Classification")
            tableMapping.ColumnMappings.Add("Episode Date", "Episode Date")
            tableMapping.ColumnMappings.Add("Reported Date", "Reported Date")
            tableMapping.ColumnMappings.Add("Client Gender", "Client Gender")
            tableMapping.ColumnMappings.Add("Outcome", "Outcome")
            tableMapping.ColumnMappings.Add("Currently Hospitalized", "Currently Hospitalized")
            tableMapping.ColumnMappings.Add("Currently in ICU", "Currently in ICU")
            tableMapping.ColumnMappings.Add("Currently Intubated", "Currently Intubated")
            tableMapping.ColumnMappings.Add("Ever Hospitalized", "Ever Hospitalized")
            tableMapping.ColumnMappings.Add("Ever in ICU", "Ever in ICU")
            tableMapping.ColumnMappings.Add("Ever Intubated", "Ever Intubated")
            tableMapping.ColumnMappings.Add("Year", "Year")
            tableMapping.ColumnMappings.Add("Month", "Month")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Cases] ([Id], [Assigned_ID], [Outbreak Associated], [Age Group"& _ 
                "], [Neighbourhood Name], [FSA], [Source of Infection], [Classification], [Episod"& _ 
                "e Date], [Reported Date], [Client Gender], [Outcome], [Currently Hospitalized], "& _ 
                "[Currently in ICU], [Currently Intubated], [Ever Hospitalized], [Ever in ICU], ["& _ 
                "Ever Intubated], [Year], [Month]) VALUES (@Id, @Assigned_ID, @Outbreak_Associate"& _ 
                "d, @Age_Group, @Neighbourhood_Name, @FSA, @Source_of_Infection, @Classification,"& _ 
                " @Episode_Date, @Reported_Date, @Client_Gender, @Outcome, @Currently_Hospitalize"& _ 
                "d, @Currently_in_ICU, @Currently_Intubated, @Ever_Hospitalized, @Ever_in_ICU, @E"& _ 
                "ver_Intubated, @Year, @Month)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Id"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Assigned_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Assigned_ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Outbreak_Associated"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Outbreak Associated"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Age_Group"
            param.SqlDbType = Global.System.Data.SqlDbType.NVarChar
            param.IsNullable = true
            param.SourceColumn = "Age Group"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Neighbourhood_Name"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Neighbourhood Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@FSA"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FSA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Source_of_Infection"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Source of Infection"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Classification"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Classification"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Episode_Date"
            param.DbType = Global.System.Data.DbType.[Date]
            param.SqlDbType = Global.System.Data.SqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "Episode Date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Reported_Date"
            param.DbType = Global.System.Data.DbType.[Date]
            param.SqlDbType = Global.System.Data.SqlDbType.[Date]
            param.IsNullable = true
            param.SourceColumn = "Reported Date"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Client_Gender"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Client Gender"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Outcome"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Outcome"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Currently_Hospitalized"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Currently Hospitalized"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Currently_in_ICU"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Currently in ICU"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Currently_Intubated"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Currently Intubated"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Ever_Hospitalized"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Ever Hospitalized"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Ever_in_ICU"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Ever in ICU"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Ever_Intubated"
            param.DbType = Global.System.Data.DbType.AnsiStringFixedLength
            param.SqlDbType = Global.System.Data.SqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "Ever Intubated"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Year"
            param.DbType = Global.System.Data.DbType.Int16
            param.SqlDbType = Global.System.Data.SqlDbType.SmallInt
            param.IsNullable = true
            param.SourceColumn = "Year"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Month"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Month"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PatientsApp.My.MySettings.Default.PatientsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Id, Assigned_ID, [Outbreak Associated], [Age Group], [Neighbourhood Name],"& _ 
                " FSA, [Source of Infection], Classification, [Episode Date], [Reported Date], [C"& _ 
                "lient Gender], Outcome, [Currently Hospitalized], [Currently in ICU], [Currently"& _ 
                " Intubated], [Ever Hospitalized], [Ever in ICU], [Ever Intubated], Year, Month F"& _ 
                "ROM dbo.Cases"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PatientsDataSet1.CasesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PatientsDataSet1.CasesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PatientsDataSet1.CasesDataTable = New PatientsDataSet1.CasesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As PatientsDataSet1.CasesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As PatientsDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "Cases")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Id As Integer,  _
                    ByVal Assigned_ID As Integer,  _
                    ByVal Outbreak_Associated As String,  _
                    ByVal Age_Group As String,  _
                    ByVal Neighbourhood_Name As String,  _
                    ByVal FSA As String,  _
                    ByVal Source_of_Infection As String,  _
                    ByVal Classification As String,  _
                    ByVal Episode_Date As Date,  _
                    ByVal Reported_Date As Date,  _
                    ByVal Client_Gender As String,  _
                    ByVal Outcome As String,  _
                    ByVal Currently_Hospitalized As String,  _
                    ByVal Currently_in_ICU As String,  _
                    ByVal Currently_Intubated As String,  _
                    ByVal Ever_Hospitalized As String,  _
                    ByVal Ever_in_ICU As String,  _
                    ByVal Ever_Intubated As String,  _
                    ByVal Year As Short,  _
                    ByVal Month As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Id,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Assigned_ID,Integer)
            If (Outbreak_Associated Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Outbreak_Associated")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Outbreak_Associated,String)
            End If
            If (Age_Group Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Age_Group")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Age_Group,String)
            End If
            If (Neighbourhood_Name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Neighbourhood_Name,String)
            End If
            If (FSA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(FSA,String)
            End If
            If (Source_of_Infection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Source_of_Infection")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Source_of_Infection,String)
            End If
            If (Classification Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Classification")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Classification,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Episode_Date,Date)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Reported_Date,Date)
            If (Client_Gender Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Client_Gender")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Client_Gender,String)
            End If
            If (Outcome Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Outcome")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Outcome,String)
            End If
            If (Currently_Hospitalized Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Currently_Hospitalized")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Currently_Hospitalized,String)
            End If
            If (Currently_in_ICU Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Currently_in_ICU")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Currently_in_ICU,String)
            End If
            If (Currently_Intubated Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Currently_Intubated")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Currently_Intubated,String)
            End If
            If (Ever_Hospitalized Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ever_Hospitalized")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Ever_Hospitalized,String)
            End If
            If (Ever_in_ICU Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ever_in_ICU")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Ever_in_ICU,String)
            End If
            If (Ever_Intubated Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Ever_Intubated")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Ever_Intubated,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(Year,Short)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(Month,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class NeighbourhoodTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Microsoft.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.Microsoft.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.Microsoft.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Microsoft.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Connection() As Global.Microsoft.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Microsoft.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Friend Property Transaction() As Global.Microsoft.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Microsoft.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Microsoft.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Neighbourhood"
            tableMapping.ColumnMappings.Add("Neighbourhood Name", "Neighbourhood Name")
            tableMapping.ColumnMappings.Add("Population", "Population")
            tableMapping.ColumnMappings.Add("Population Density", "Population Density")
            tableMapping.ColumnMappings.Add("Children", "Children")
            tableMapping.ColumnMappings.Add("Youth", "Youth")
            tableMapping.ColumnMappings.Add("Working Age", "Working Age")
            tableMapping.ColumnMappings.Add("Pre-retirement", "Pre-retirement")
            tableMapping.ColumnMappings.Add("Seniors", "Seniors")
            tableMapping.ColumnMappings.Add("Older Seniors", "Older Seniors")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Neighbourhood] ([Neighbourhood Name], [Population], [Populatio"& _ 
                "n Density], [Children], [Youth], [Working Age], [Pre-retirement], [Seniors], [Ol"& _ 
                "der Seniors]) VALUES (@Neighbourhood_Name, @Population, @Population_Density, @Ch"& _ 
                "ildren, @Youth, @Working_Age, @p1, @Seniors, @Older_Seniors)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Microsoft.Data.SqlClient.SqlParameter = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Neighbourhood_Name"
            param.DbType = Global.System.Data.DbType.AnsiString
            param.SqlDbType = Global.System.Data.SqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "Neighbourhood Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Population"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Population"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Population_Density"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Population Density"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Children"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Children"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Youth"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Youth"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Working_Age"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Working Age"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Pre-retirement"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Seniors"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Seniors"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Microsoft.Data.SqlClient.SqlParameter()
            param.ParameterName = "@Older_Seniors"
            param.DbType = Global.System.Data.DbType.Int32
            param.SqlDbType = Global.System.Data.SqlDbType.Int
            param.IsNullable = true
            param.SourceColumn = "Older Seniors"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Microsoft.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.PatientsApp.My.MySettings.Default.PatientsConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Microsoft.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.Microsoft.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [Neighbourhood Name], Population, [Population Density], Children, Youth, ["& _ 
                "Working Age], [Pre-retirement], Seniors, [Older Seniors] FROM dbo.Neighbourhood"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PatientsDataSet1.NeighbourhoodDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PatientsDataSet1.NeighbourhoodDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PatientsDataSet1.NeighbourhoodDataTable = New PatientsDataSet1.NeighbourhoodDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As PatientsDataSet1.NeighbourhoodDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As PatientsDataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "Neighbourhood")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Neighbourhood_Name As String, ByVal Population As Integer, ByVal Population_Density As Integer, ByVal Children As Integer, ByVal Youth As Integer, ByVal Working_Age As Integer, ByVal p1 As Integer, ByVal Seniors As Integer, ByVal Older_Seniors As Integer) As Integer
            If (Neighbourhood_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Neighbourhood_Name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Neighbourhood_Name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Population,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Population_Density,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Children,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Youth,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Working_Age,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(p1,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Seniors,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Older_Seniors,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _casesTableAdapter As CasesTableAdapter
        
        Private _neighbourhoodTableAdapter As NeighbourhoodTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CasesTableAdapter() As CasesTableAdapter
            Get
                Return Me._casesTableAdapter
            End Get
            Set
                Me._casesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property NeighbourhoodTableAdapter() As NeighbourhoodTableAdapter
            Get
                Return Me._neighbourhoodTableAdapter
            End Get
            Set
                Me._neighbourhoodTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._casesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._casesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._casesTableAdapter.Connection
                End If
                If ((Not (Me._neighbourhoodTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._neighbourhoodTableAdapter.Connection) Is Nothing)) Then
                    Return Me._neighbourhoodTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._casesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._neighbourhoodTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As PatientsDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._casesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Cases.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._casesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._neighbourhoodTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Neighbourhood.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._neighbourhoodTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As PatientsDataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._casesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Cases.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._casesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._neighbourhoodTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Neighbourhood.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._neighbourhoodTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As PatientsDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._neighbourhoodTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Neighbourhood.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._neighbourhoodTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._casesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Cases.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._casesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As PatientsDataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._casesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._casesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._neighbourhoodTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._neighbourhoodTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._casesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._casesTableAdapter, Me._casesTableAdapter.Connection)
                    Me._casesTableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._casesTableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._casesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._casesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._casesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._neighbourhoodTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._neighbourhoodTableAdapter, Me._neighbourhoodTableAdapter.Connection)
                    Me._neighbourhoodTableAdapter.Connection = CType(workConnection,Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._neighbourhoodTableAdapter.Transaction = CType(workTransaction,Global.Microsoft.Data.SqlClient.SqlTransaction)
                    If Me._neighbourhoodTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._neighbourhoodTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._neighbourhoodTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._casesTableAdapter) Is Nothing) Then
                    Me._casesTableAdapter.Connection = CType(revertConnections(Me._casesTableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._casesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._neighbourhoodTableAdapter) Is Nothing) Then
                    Me._neighbourhoodTableAdapter.Connection = CType(revertConnections(Me._neighbourhoodTableAdapter),Global.Microsoft.Data.SqlClient.SqlConnection)
                    Me._neighbourhoodTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
